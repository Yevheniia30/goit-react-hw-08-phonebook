{"version":3,"file":"static/js/492.46f0a57f.chunk.js","mappings":"mQACA,EAAuB,mBAAvB,EAAkD,oBAAlD,EAA8E,oBAA9E,EAAwG,kBAAxG,EAAiI,mB,uCCMpHA,EAAW,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7BC,EAAeD,EACjB,CACEE,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZ,CAAED,MAAO,GAAIC,SAAU,IAC3B,GAAsCC,EAAAA,EAAAA,WAAS,UAC1CJ,IADL,eAAOK,EAAP,KAAoBC,EAApB,KAIQL,EAA0BI,EAA1BJ,KAAMC,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SAEfI,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAGdJ,GAAe,SAAAK,GAAI,yBACdA,GADc,cAEhBV,EAAOS,QAYZ,GAAwBN,EAAAA,EAAAA,UAAS,YAAjC,eAAOQ,EAAP,KAAaC,EAAb,KACMC,EAAiB,SAAAN,GAECK,EAAb,aAATD,EAA8B,OAAkB,aAGlD,OACE,iCACE,kBAAMG,UAAWC,EAAQlB,SAhBR,SAAAU,GACnBA,EAAES,iBACFnB,EAASO,GACTC,GAAe,UACVN,KAYH,UACGD,IACC,mBAAOgB,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXN,MAAOT,EACPiB,SAAUX,EACVK,KAAK,OACLX,KAAK,OACLkB,QAAQ,yHACRC,MAAM,+IAMZ,mBAAOL,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXN,MAAOR,EACPgB,SAAUX,EACVK,KAAK,QACLX,KAAK,cAOT,mBAAOc,UAAWC,EAASK,MAAO,CAAEC,SAAU,YAA9C,sBAEE,kBACEP,UAAWC,EACXN,MAAOP,EACPe,SAAUX,EACVK,KAAMA,EACNX,KAAK,aAOG,aAATW,GACC,SAAC,MAAD,CACEW,QAAST,EACTO,MAAO,CAGLC,SAAU,WACVE,IAAK,OACLC,KAAM,YAIV,SAAC,MAAD,CACEF,QAAST,EACTO,MAAO,CAGLC,SAAU,WACVE,IAAK,OACLC,KAAM,eAMd,mBAAQV,UAAWC,EAAU,IAAMA,EAAOJ,KAAK,SAA/C,SACGb,EAAW,UAAY,eAG5B,SAAC,KAAD,CAAM2B,GAAI3B,EAAW4B,EAAAA,EAAAA,MAAeA,EAAAA,EAAAA,OAAeZ,UAAWC,EAA9D,SACGjB,EACG,kCACA,4C,kBCrHC6B,EAAc,WACzB,OAAwBxB,EAAAA,EAAAA,UAAS,IAAjC,eAAOH,EAAP,KAAa4B,EAAb,KACA,GAA0BzB,EAAAA,EAAAA,UAAS,IAAnC,eAAO0B,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,YAE/C3B,EAAe,SAAAC,GACnB,MAAwBA,EAAE6B,cAAlBpC,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACH4B,EAAQnB,GACR,MACF,IAAK,QACHqB,EAASrB,GACT,MACF,QACE,SA2BA4B,EAAQ,WACZT,EAAQ,IACRE,EAAS,KAGX,OACE,kBAAMhB,UAAWC,EAAQlB,SA7BN,SAAAU,GACnBA,EAAES,iBACF,IAAMsB,EAAYL,EAASM,MACzB,SAAAC,GAAI,OAAIA,EAAKxC,KAAKyC,gBAAkBzC,EAAKyC,iBAErCC,EAAaT,EAASM,MAAK,SAAAC,GAAI,OAAIA,EAAKG,SAAWd,KAEnDe,EAAU,CACd5C,KAAAA,EACA2C,OAAQd,GAGVS,EACIO,MAAM,GAAD,OAAI7C,EAAJ,8CAA8CsC,EAAUK,SAC7DD,EACAG,MAAM,GAAD,OAAIhB,EAAJ,sCAAuCa,EAAW1C,OACtDA,GAAS6B,EAEVE,EAASe,EAAAA,EAAAA,WAA8BF,IADvCC,MAAM,4BAGVR,KASA,WACE,mBAAOvB,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXN,MAAOT,EACPiB,SAAUX,EACVK,KAAK,OACLX,KAAK,OACLkB,QAAQ,yHACRC,MAAM,+IAIV,mBAAOL,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXN,MAAOoB,EACPZ,SAAUX,EACVK,KAAK,MACLX,KAAK,QACLkB,QAAQ,yFACRC,MAAM,qGAIV,mBAAQL,UAAWC,EAAU,IAAMA,EAAOJ,KAAK,SAA/C,6B,UC9EOoC,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WACxC,GAAkC9C,EAAAA,EAAAA,UAAS6C,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACQnD,EAAiBkD,EAAjBlD,KAAM2C,EAAWO,EAAXP,OAERZ,GAAWC,EAAAA,EAAAA,MACjB,GAAwB7B,EAAAA,EAAAA,UAAS,IAAjC,eAAOiD,EAAP,KAAaC,EAAb,KAEM/C,EAAe,SAAAC,GAEnB,MAAwBA,EAAE6B,cAAlBpC,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHmD,GAAa,SAAAzC,GAAI,yBACZA,GADY,IAEfV,KAAMS,OAER,MACF,IAAK,SACH0C,GAAa,SAAAzC,GAAI,yBACZA,GADY,IAEfiC,OAAQlC,OAEV,MACF,QACE,SAgBN,OACE,kBAAMK,UAAWC,EAAQlB,SAbN,SAAAU,GACnBA,EAAES,iBAEGhB,GAAS2C,GAGZU,EAAQ,IACRtB,GAASuB,EAAAA,EAAAA,aAAYJ,IACrBD,KAJAI,EAAQ,6BASV,WACE,mBAAOvC,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXN,MAAOT,EACPiB,SAAUX,EACVK,KAAK,OACLX,KAAK,OACLkB,QAAQ,yHACRC,MAAM,+IAIV,mBAAOL,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXN,MAAOkC,EACP1B,SAAUX,EACVK,KAAK,MACLX,KAAK,SACLkB,QAAQ,yFACRC,MAAM,oGAITiC,IAAQ,cAAGhC,MAAO,CAAEmC,MAAO,OAAnB,SAA6BH,KACtC,mBAAQtC,UAAWC,EAAU,IAAMA,EAAOJ,KAAK,SAA/C,kC,wHC1EN,GAAgB,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,KAAO,0BAA0B,IAAM,0B,qCCQ5K6C,EAAc,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,KAAMiB,EAAgB,EAAhBA,UAC5B1B,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gBAAIlB,UAAWC,EAAAA,KAAf,WAWE,cAAGD,UAAWC,EAAAA,KAAd,SAAuByB,EAAKxC,QAC5B,0BAAOwC,EAAKG,UACZ,iBAAK7B,UAAWC,EAAAA,KAAhB,WACE,mBACED,UAAWC,EAAAA,IACXO,QAAS,kBAAMmC,EAAUjB,IACzBrB,MAAM,eAHR,UAKE,SAAC,MAAD,CAAQuC,KAAK,UAAU5C,UAAWC,EAAAA,UAEpC,mBACED,UAAWC,EAAAA,IACXO,QAAS,kBAAMS,GAAS4B,EAAAA,EAAAA,eAAcnB,EAAKoB,MAC3CzC,MAAM,iBAHR,UAKE,SAAC,MAAD,CAASuC,KAAK,UAAU5C,UAAWC,EAAAA,eChChC8C,EAAc,SAAC,GAAmB,IAAjBJ,EAAgB,EAAhBA,UACtB1B,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,YAC/C6B,GAAS5B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAAS6B,UAC7CC,GAAU7B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAAS8B,WAC9CC,GAAQ9B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAAS+B,UAIlDC,EAAAA,EAAAA,YAAU,WACRlC,EAASe,EAAAA,EAAAA,gBACR,CAACf,IAEJ,IAYMmC,EAZsB,WAC1B,GAAKJ,EAEE,CACL,IAAMK,EAAaL,EAAOrB,cAE1B,OAAOR,EAAS6B,QAAO,SAAAtB,GAAI,OACzBA,EAAKxC,KAAKyC,cAAc2B,SAASD,MALnC,OAAOlC,EAUcoC,GAEzB,OACE,iCACE,eAAIvD,UAAWC,EAAAA,KAAf,gBACGmD,QADH,IACGA,OADH,EACGA,EAAkBI,KAAI,SAAA9B,GAAI,OACzB,SAACgB,EAAD,CAAahB,KAAMA,EAAoBiB,UAAWA,GAApBjB,EAAKoB,SAGtCG,IAAW,SAAC,KAAD,CAAWR,MAAM,UAAUgB,OAAQ,GAAIC,MAAO,KACzDR,IACC,cAAG5C,MAAO,CAAEmC,MAAO,OAAnB,uDC1CR,EAAyB,uB,UCIZkB,EAAS,WACpB,IAAM1C,GAAWC,EAAAA,EAAAA,MACX8B,GAAS5B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAAS6B,UAOnD,OACE,uDAEE,kBACEnD,KAAK,OACLG,UAAWC,EACX2D,YAAY,oBACZjE,MAAOqD,EACP7C,SAbe,SAAAV,GACnB,IAAQE,EAAUF,EAAE6B,cAAZ3B,MACRsB,GAAS4C,EAAAA,EAAAA,GAAclE,W,UCV3B,EAA0B,uBAA1B,EAAyD,qBAAzD,EAAoF,mBAApF,EAA8G,oB,UCIjGmE,EAAQ,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAU5B,EAAiB,EAAjBA,WAC1B6B,EAAYC,SAASC,eAAe,cAE1C,OAAOC,EAAAA,EAAAA,eACL,gBAAKnE,UAAWC,EAAhB,UACE,iBAAKD,UAAWC,EAAhB,WACE,mBAAQD,UAAWC,EAAOO,QAAS2B,EAAnC,UACE,SAAC,MAAD,CAASnC,UAAWC,MAErB8D,OAGLC,ICoBJ,EA/BqB,WACnB,OAA4B3E,EAAAA,EAAAA,WAAS,GAArC,eAAO+E,EAAP,KAAeC,EAAf,KACA,GAA0ChF,EAAAA,EAAAA,UAAS,IAAnD,eAAO6C,EAAP,KAAsBoC,EAAtB,KAOMC,EAAmB,WACvBF,GAAU,GACVC,EAAiB,KAGnB,OACE,4BACE,SAAC,IAAD,KACA,SAACX,EAAD,KACA,SAACZ,EAAD,CAAaJ,UAdO,SAAAjB,GACtB2C,GAAU,GACVC,EAAiB5C,MAad0C,IACC,SAACN,EAAD,CAAO3B,WAAYoC,EAAnB,UACE,SAAC,KAAD,CACErC,cAAeA,EACfC,WAAYoC,W","sources":["webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/UserForm.jsx","components/Form/ContactForm.jsx","components/Form/EditForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"btn\":\"Form_btn__0ebGo\",\"link\":\"Form_link__fzlRv\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport s from './Form.module.css';\nimport { routes } from 'routes';\nimport { Link } from 'react-router-dom';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\n\nexport const UserForm = ({ onSubmit, isSignup }) => {\n  const initialState = isSignup\n    ? {\n        name: '',\n        email: '',\n        password: '',\n      }\n    : { email: '', password: '' };\n  const [credentials, setCredentials] = useState({\n    ...initialState,\n  });\n\n  const { name, email, password } = credentials;\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    // console.log(name, value);\n\n    setCredentials(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(credentials);\n    setCredentials({\n      ...initialState,\n    });\n  };\n\n  const [type, setType] = useState('password');\n  const togglePassword = e => {\n    // const { type } = e.target.type;\n    type === 'password' ? setType('text') : setType('password');\n  };\n\n  return (\n    <>\n      <form className={s.form} onSubmit={handleSubmit}>\n        {isSignup && (\n          <label className={s.label}>\n            Name\n            <input\n              className={s.input}\n              value={name}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              // required\n            />\n          </label>\n        )}\n\n        <label className={s.label}>\n          Email\n          <input\n            className={s.input}\n            value={email}\n            onChange={handleChange}\n            type=\"email\"\n            name=\"email\"\n            //   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            //   title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            // required\n          />\n        </label>\n\n        <label className={s.label} style={{ position: 'relative' }}>\n          Password\n          <input\n            className={s.input}\n            value={password}\n            onChange={handleChange}\n            type={type}\n            name=\"password\"\n            // {type==='password'?<FaEye/>: <FaEyeSlash/>}\n            //  {<FaEyeSlash/>}\n            //   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            //   title=\"Password  must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            // required\n          />\n          {type === 'password' ? (\n            <FaEye\n              onClick={togglePassword}\n              style={{\n                // width: '24px',\n                // height: '24px',\n                position: 'absolute',\n                top: '35px',\n                left: '185px',\n              }}\n            />\n          ) : (\n            <FaEyeSlash\n              onClick={togglePassword}\n              style={{\n                // width: '24px',\n                // height: '24px',\n                position: 'absolute',\n                top: '35px',\n                left: '185px',\n              }}\n            />\n          )}\n        </label>\n\n        <button className={s.input + ' ' + s.btn} type=\"submit\">\n          {isSignup ? 'Sign up' : 'Log In'}\n        </button>\n      </form>\n      <Link to={isSignup ? routes.login : routes.signup} className={s.link}>\n        {isSignup\n          ? 'Already have an account? Log in'\n          : 'Do not have an account yet? Sign up'}\n      </Link>\n    </>\n  );\n};\n\nUserForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  isSignup: PropTypes.bool,\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './Form.module.css';\n// import { addContact } from 'redux/contacts/contactsActions';\n// import { addContact } from 'redux/contacts/contactsOperations';\nimport { contactsOperations } from 'redux/contacts';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const addedName = contacts.find(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n    const addedphone = contacts.find(item => item.number === phone);\n\n    const contact = {\n      name,\n      number: phone,\n    };\n\n    addedName\n      ? alert(`${name} is already in contacts with phone ${addedName.number}`)\n      : addedphone\n      ? alert(`${phone} is already in contacts as ${addedphone.name}`)\n      : !name || !phone\n      ? alert('Сomplete all fields')\n      : dispatch(contactsOperations.addContact(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          // required\n        />\n      </label>\n      <label className={s.label}>\n        phone\n        <input\n          className={s.input}\n          value={phone}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          // required\n        />\n      </label>\n      <button className={s.input + ' ' + s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types';\nimport s from './Form.module.css';\n\nexport const EditForm = ({ contactToEdit, closeModal }) => {\n  const [contactTo, setContactTo] = useState(contactToEdit);\n  const { name, number } = contactTo;\n\n  const dispatch = useDispatch();\n  const [warn, setWarn] = useState('');\n\n  const handleChange = e => {\n    // console.log(e.currentTarget);\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setContactTo(prev => ({\n          ...prev,\n          name: value,\n        }));\n        break;\n      case 'number':\n        setContactTo(prev => ({\n          ...prev,\n          number: value,\n        }));\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name || !number) {\n      setWarn('Сomplete all fields');\n    } else {\n      setWarn('');\n      dispatch(editContact(contactTo));\n      closeModal();\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          // required\n        />\n      </label>\n      <label className={s.label}>\n        phone\n        <input\n          className={s.input}\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          // required\n        />\n      </label>\n      {warn && <p style={{ color: 'red' }}>{warn}</p>}\n      <button className={s.input + ' ' + s.btn} type=\"submit\">\n        Confirm changes\n      </button>\n    </form>\n  );\n};\n\nEditForm.propTypes = {\n  contactToEdit: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  closeModal: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"name\":\"ContactList_name__UCkFW\",\"item\":\"ContactList_item__EZYHO\",\"btn\":\"ContactList_btn__6Piat\",\"edit\":\"ContactList_edit__jpzPE\",\"del\":\"ContactList_del__WHOxA\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  // toggleContact,\n  deleteContact,\n} from 'redux/contacts/contactsOperations';\nimport s from './ContactList.module.css';\nimport { FaTrash, FaEdit } from 'react-icons/fa';\n\nexport const ContactItem = ({ item, openModal }) => {\n  const dispatch = useDispatch();\n  // console.log('item', item);\n  return (\n    <li className={s.item}>\n      {/* <FaStar\n        fill={item?.isImportant ? '#f5d20d' : '#cecece'}\n        title=\"mark as important\"\n        cursor=\"pointer\"\n        onClick={() =>\n          dispatch(\n            toggleContact({ id: item.id, isImportant: !item.isImportant })\n          )\n        }\n      /> */}\n      <b className={s.name}>{item.name}</b>\n      <span>{item.number}</span>\n      <div className={s.btns}>\n        <button\n          className={s.btn}\n          onClick={() => openModal(item)}\n          title=\"Edit contact\"\n        >\n          <FaEdit fill=\"#757474\" className={s.edit} />\n        </button>\n        <button\n          className={s.btn}\n          onClick={() => dispatch(deleteContact(item.id))}\n          title=\"Delete contact\"\n        >\n          <FaTrash fill=\"#757474\" className={s.del} />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    // isImportant: PropTypes.bool,\n  }),\n  openModal: PropTypes.func.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\nimport s from './ContactList.module.css';\nimport { contactsOperations } from 'redux/contacts';\nimport { ContactItem } from './ContactItem';\n\nexport const ContactList = ({ openModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.contacts.filter);\n  const loading = useSelector(state => state.contacts.loading);\n  const error = useSelector(state => state.contacts.error);\n\n  // console.log('error', error);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContact());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    } else {\n      const normalized = filter.toLowerCase();\n\n      return contacts.filter(item =>\n        item.name.toLowerCase().includes(normalized)\n      );\n    }\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <>\n      <ul className={s.list}>\n        {filteredContacts?.map(item => (\n          <ContactItem item={item} key={item.id} openModal={openModal} />\n        ))}\n      </ul>\n      {loading && <ThreeDots color=\"#00BFFF\" height={80} width={80} />}\n      {error && (\n        <p style={{ color: 'red' }}>Oops, something went wrong, try again</p>\n      )}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { filterContact } from 'redux/contacts/contactsActions';\nimport { filterContact } from 'redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter);\n\n  const handleFilter = e => {\n    const { value } = e.currentTarget;\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <label>\n      Search contact by name\n      <input\n        type=\"text\"\n        className={s.filter}\n        placeholder=\"Search contact...\"\n        value={filter}\n        onChange={handleFilter}\n      />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\",\"btn\":\"Modal_btn__ghtlt\",\"icon\":\"Modal_icon__2UpwH\"};","import PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport s from './Modal.module.css';\nimport { GrClose } from 'react-icons/gr';\n\nexport const Modal = ({ children, closeModal }) => {\n  const modalRoot = document.getElementById('modal-root');\n\n  return createPortal(\n    <div className={s.Overlay}>\n      <div className={s.Modal}>\n        <button className={s.btn} onClick={closeModal}>\n          <GrClose className={s.icon} />\n        </button>\n        {children}\n      </div>\n    </div>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { ContactForm, EditForm } from 'components/Form';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { Modal } from 'components/Modal';\n\nconst ContactsPage = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [contactToEdit, setContactToEdit] = useState({});\n\n  const handleOpenModal = item => {\n    setIsOpen(true);\n    setContactToEdit(item);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpen(false);\n    setContactToEdit({});\n  };\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList openModal={handleOpenModal} />\n      {isOpen && (\n        <Modal closeModal={handleCloseModal}>\n          <EditForm\n            contactToEdit={contactToEdit}\n            closeModal={handleCloseModal}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["UserForm","onSubmit","isSignup","initialState","name","email","password","useState","credentials","setCredentials","handleChange","e","target","value","prev","type","setType","togglePassword","className","s","preventDefault","onChange","pattern","title","style","position","onClick","top","left","to","routes","ContactForm","setName","phone","setPhone","dispatch","useDispatch","contacts","useSelector","state","currentTarget","reset","addedName","find","item","toLowerCase","addedphone","number","contact","alert","contactsOperations","EditForm","contactToEdit","closeModal","contactTo","setContactTo","warn","setWarn","editContact","color","ContactItem","openModal","fill","deleteContact","id","ContactList","filter","loading","error","useEffect","filteredContacts","normalized","includes","getFilteredContacts","map","height","width","Filter","placeholder","filterContact","Modal","children","modalRoot","document","getElementById","createPortal","isOpen","setIsOpen","setContactToEdit","handleCloseModal"],"sourceRoot":""}