{"version":3,"file":"static/js/175.bf85baf9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/UserForm.jsx","components/Form/ContactForm.jsx","components/Form/EditForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"btn\":\"Form_btn__0ebGo\",\"link\":\"Form_link__fzlRv\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport s from './Form.module.css';\nimport { routes } from 'routes';\nimport { Link } from 'react-router-dom';\n\nexport const UserForm = ({ onSubmit, isSignup }) => {\n  const initialState = isSignup\n    ? {\n        name: '',\n        email: '',\n        password: '',\n      }\n    : { email: '', password: '' };\n  const [credentials, setCredentials] = useState({\n    ...initialState,\n  });\n\n  const { name, email, password } = credentials;\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    // console.log(name, value);\n\n    setCredentials(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(credentials);\n    setCredentials({\n      ...initialState,\n    });\n  };\n\n  return (\n    <>\n      <form className={s.form} onSubmit={handleSubmit}>\n        {isSignup && (\n          <label className={s.label}>\n            Name\n            <input\n              className={s.input}\n              value={name}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              // required\n            />\n          </label>\n        )}\n\n        <label className={s.label}>\n          Email\n          <input\n            className={s.input}\n            value={email}\n            onChange={handleChange}\n            type=\"email\"\n            name=\"email\"\n            //   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            //   title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            // required\n          />\n        </label>\n        <label className={s.label}>\n          Password\n          <input\n            className={s.input}\n            value={password}\n            onChange={handleChange}\n            type=\"password\"\n            name=\"password\"\n            //   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            //   title=\"Password  must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            // required\n          />\n        </label>\n        <button className={s.input + ' ' + s.btn} type=\"submit\">\n          {isSignup ? 'Sign up' : 'Log In'}\n        </button>\n      </form>\n      <Link to={isSignup ? routes.login : routes.signup} className={s.link}>\n        {isSignup\n          ? 'Already have an account? Log in'\n          : 'Do not have an account yet? Sign up'}\n      </Link>\n    </>\n  );\n};\n\nUserForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  isSignup: PropTypes.bool,\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './Form.module.css';\n// import { addContact } from 'redux/contacts/contactsActions';\n// import { addContact } from 'redux/contacts/contactsOperations';\nimport { contactsOperations } from 'redux/contacts';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const addedName = contacts.find(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n    const addedphone = contacts.find(item => item.number === phone);\n\n    const contact = {\n      name,\n      number: phone,\n    };\n\n    addedName\n      ? alert(`${name} is already in contacts with phone ${addedName.number}`)\n      : addedphone\n      ? alert(`${phone} is already in contacts as ${addedphone.name}`)\n      : !name || !phone\n      ? alert('Сomplete all fields')\n      : dispatch(contactsOperations.addContact(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          // required\n        />\n      </label>\n      <label className={s.label}>\n        phone\n        <input\n          className={s.input}\n          value={phone}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          // required\n        />\n      </label>\n      <button className={s.input + ' ' + s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types';\nimport s from './Form.module.css';\n\nexport const EditForm = ({ contactToEdit, closeModal }) => {\n  const [contactTo, setContactTo] = useState(contactToEdit);\n  const { name, number } = contactTo;\n\n  const dispatch = useDispatch();\n  const [warn, setWarn] = useState('');\n\n  const handleChange = e => {\n    // console.log(e.currentTarget);\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setContactTo(prev => ({\n          ...prev,\n          name: value,\n        }));\n        break;\n      case 'number':\n        setContactTo(prev => ({\n          ...prev,\n          number: value,\n        }));\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name || !number) {\n      setWarn('Сomplete all fields');\n    } else {\n      setWarn('');\n      dispatch(editContact(contactTo));\n      closeModal();\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          // required\n        />\n      </label>\n      <label className={s.label}>\n        phone\n        <input\n          className={s.input}\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          // required\n        />\n      </label>\n      {warn && <p style={{ color: 'red' }}>{warn}</p>}\n      <button className={s.input + ' ' + s.btn} type=\"submit\">\n        Confirm changes\n      </button>\n    </form>\n  );\n};\n\nEditForm.propTypes = {\n  contactToEdit: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  closeModal: PropTypes.func.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authOperations';\nimport { UserForm } from 'components/Form';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = user => {\n    dispatch(login(user));\n  };\n\n  return <UserForm onSubmit={handleSubmit} />;\n};\n\nexport default LoginPage;\n"],"names":["UserForm","onSubmit","isSignup","initialState","name","email","password","useState","credentials","setCredentials","handleChange","e","target","value","prev","className","s","preventDefault","onChange","type","pattern","title","to","routes","ContactForm","setName","phone","setPhone","dispatch","useDispatch","contacts","useSelector","state","currentTarget","reset","addedName","find","item","toLowerCase","addedphone","number","contact","alert","contactsOperations","EditForm","contactToEdit","closeModal","contactTo","setContactTo","warn","setWarn","editContact","style","color","user","login"],"sourceRoot":""}